/*++

Licensed under the Apache-2.0 license.

File Name:

    val.rs

Abstract:

    File contains the implementation of the validation ROM reset flows

--*/

#[cfg(not(feature = "val-rom"))]
compile_error!("This file should NEVER be included except for the val-rom feature");

#[allow(dead_code)]
#[path = "cold_reset/fw_processor.rs"]
mod fw_processor;

use crate::fht;
use crate::flow::update_reset;
use crate::flow::warm_reset;
use crate::print::HexBytes;
use crate::rom_env::RomEnv;
use caliptra_common::RomBootStatus::*;
use caliptra_common::{
    memory_layout::{FMCALIAS_TBS_ORG, FMCALIAS_TBS_SIZE, LDEVID_TBS_ORG, LDEVID_TBS_SIZE},
    FirmwareHandoffTable,
};
use caliptra_drivers::cprintln;
use caliptra_drivers::Lifecycle;
use caliptra_drivers::LmsResult;
use caliptra_drivers::VendorPubKeyRevocation;
use caliptra_drivers::*;
use caliptra_error::CaliptraError;
use caliptra_image_types::*;
use caliptra_image_verify::ImageVerificationEnv;
use core::ops::Range;
use fw_processor::FirmwareProcessor;

const VAL_LDEV_TBS: [u8; 533] = [
    0x30, 0x82, 0x02, 0x11, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x25, 0xEE, 0xEF, 0x9A, 0x4C,
    0x61, 0xD4, 0xB9, 0xE3, 0xD9, 0x4B, 0xEA, 0x46, 0xF9, 0xA1, 0x2A, 0xC6, 0x88, 0x7C, 0xE2, 0x30,
    0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x03, 0x30, 0x65, 0x31, 0x18, 0x30,
    0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0F, 0x43, 0x61, 0x6C, 0x69, 0x70, 0x74, 0x72, 0x61,
    0x20, 0x49, 0x44, 0x65, 0x76, 0x49, 0x44, 0x31, 0x49, 0x30, 0x47, 0x06, 0x03, 0x55, 0x04, 0x05,
    0x13, 0x40, 0x38, 0x45, 0x33, 0x43, 0x31, 0x41, 0x30, 0x35, 0x38, 0x46, 0x37, 0x30, 0x34, 0x41,
    0x31, 0x31, 0x38, 0x32, 0x31, 0x46, 0x37, 0x42, 0x34, 0x38, 0x44, 0x33, 0x34, 0x30, 0x41, 0x45,
    0x46, 0x39, 0x39, 0x44, 0x44, 0x41, 0x42, 0x41, 0x44, 0x43, 0x31, 0x30, 0x39, 0x30, 0x44, 0x37,
    0x34, 0x44, 0x30, 0x35, 0x37, 0x46, 0x45, 0x43, 0x43, 0x46, 0x37, 0x33, 0x32, 0x39, 0x34, 0x45,
    0x44, 0x36, 0x30, 0x22, 0x18, 0x0F, 0x32, 0x30, 0x32, 0x33, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32,
    0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x65, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0C, 0x0F, 0x43, 0x61, 0x6C, 0x69, 0x70, 0x74, 0x72, 0x61, 0x20, 0x4C, 0x44, 0x65, 0x76,
    0x49, 0x44, 0x31, 0x49, 0x30, 0x47, 0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x40, 0x32, 0x31, 0x45,
    0x45, 0x45, 0x46, 0x39, 0x41, 0x34, 0x43, 0x36, 0x31, 0x44, 0x34, 0x42, 0x39, 0x45, 0x33, 0x44,
    0x39, 0x34, 0x42, 0x45, 0x41, 0x34, 0x36, 0x46, 0x39, 0x41, 0x31, 0x32, 0x41, 0x43, 0x36, 0x38,
    0x38, 0x37, 0x43, 0x45, 0x32, 0x31, 0x38, 0x38, 0x35, 0x35, 0x39, 0x46, 0x34, 0x30, 0x46, 0x46,
    0x39, 0x35, 0x37, 0x37, 0x37, 0x45, 0x38, 0x30, 0x31, 0x34, 0x38, 0x38, 0x39, 0x30, 0x76, 0x30,
    0x10, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x05, 0x2B, 0x81, 0x04, 0x00,
    0x22, 0x03, 0x62, 0x00, 0x04, 0x84, 0x2C, 0x00, 0xAF, 0x05, 0xAC, 0xCC, 0xEB, 0x14, 0x51, 0x4E,
    0x2D, 0x37, 0xB0, 0xC3, 0xAA, 0xA2, 0x18, 0xF1, 0x50, 0x57, 0xF1, 0xDC, 0xB8, 0x24, 0xA2, 0x14,
    0x98, 0x0B, 0x74, 0x46, 0x88, 0xA0, 0x88, 0x8A, 0x02, 0x97, 0xFA, 0x7D, 0xC5, 0xE1, 0xEA, 0xD8,
    0xCA, 0x12, 0x91, 0xDB, 0x22, 0x9C, 0x28, 0xEB, 0x86, 0x78, 0xBC, 0xE8, 0x00, 0x82, 0x2C, 0x07,
    0x22, 0x8F, 0x41, 0x6A, 0xE4, 0x9D, 0x21, 0x8E, 0x5D, 0xA2, 0xF2, 0xD1, 0xA8, 0xA2, 0x7D, 0xC1,
    0x9A, 0xDF, 0x66, 0x8A, 0x74, 0x62, 0x89, 0x99, 0xD2, 0x22, 0xB4, 0x01, 0x59, 0xD8, 0x07, 0x6F,
    0xAF, 0xBB, 0x8C, 0x5E, 0xDB, 0xA3, 0x7E, 0x30, 0x7C, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1D, 0x13,
    0x01, 0x01, 0xFF, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x00, 0x30, 0x0E, 0x06,
    0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x02, 0x04, 0x30, 0x16, 0x06,
    0x06, 0x67, 0x81, 0x05, 0x05, 0x04, 0x04, 0x04, 0x0C, 0x30, 0x0A, 0x04, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14,
    0x21, 0xEE, 0xEF, 0x9A, 0x4C, 0x61, 0xD4, 0xB9, 0xE3, 0xD9, 0x4B, 0xEA, 0x46, 0xF9, 0xA1, 0x2A,
    0xC6, 0x88, 0x7C, 0xE2, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x42, 0x4F, 0x3A, 0xC7, 0x45, 0xDD, 0xBD, 0x50, 0x15, 0x05, 0x7F, 0x5B, 0xF8, 0x3E, 0x9C,
    0xD6, 0x48, 0x10, 0xB0, 0x41,
];
const VAL_LDEV_PUB_KEY: Ecc384PubKey = Ecc384PubKey {
    x: Array4xN([
        0x842C00AF, 0x05ACCCEB, 0x14514E2D, 0x37B0C3AA, 0xA218F150, 0x57F1DCB8, 0x24A21498,
        0x0B744688, 0xA0888A02, 0x97FA7DC5, 0xE1EAD8CA, 0x1291DB22,
    ]),
    y: Array4xN([
        0x9C28EB86, 0x78BCE800, 0x822C0722, 0x8F416AE4, 0x9D218E5D, 0xA2F2D1A8, 0xA27DC19A,
        0xDF668A74, 0x628999D2, 0x22B40159, 0xD8076FAF, 0xBB8C5EDB,
    ]),
};
const VAL_LDEV_SIG: Ecc384Signature = Ecc384Signature {
    r: Array4xN([
        0x0C1B9586, 0x1ADA0DF5, 0x72438E88, 0xB23DDD5B, 0x2C24C974, 0xDF359988, 0xCC54E39E,
        0x3145635A, 0x94E3D819, 0x6B49164C, 0xAD991714, 0xC2B18892,
    ]),
    s: Array4xN([
        0x4BEDF2A7, 0xDEC94059, 0x64ADF494, 0x9819FADE, 0x2CD785CD, 0x0307078F, 0x74EA4E5C,
        0xDDF8D1FA, 0xE5380507, 0xAB098713, 0x44CA288F, 0xA6961532,
    ]),
};

const VAL_FMC_ALIAS_TBS: [u8; 745] = [
    0x30, 0x82, 0x02, 0xe5, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x16, 0xd9, 0x46, 0x0c, 0x2d,
    0xcc, 0x1e, 0x8b, 0x0f, 0x83, 0xbf, 0x47, 0xf6, 0x23, 0x9b, 0x4e, 0x15, 0x4b, 0xad, 0xf4, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x30, 0x65, 0x31, 0x18, 0x30,
    0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 0x43, 0x61, 0x6c, 0x69, 0x70, 0x74, 0x72, 0x61,
    0x20, 0x4c, 0x44, 0x65, 0x76, 0x49, 0x44, 0x31, 0x49, 0x30, 0x47, 0x06, 0x03, 0x55, 0x04, 0x05,
    0x13, 0x40, 0x32, 0x31, 0x45, 0x45, 0x45, 0x46, 0x39, 0x41, 0x34, 0x43, 0x36, 0x31, 0x44, 0x34,
    0x42, 0x39, 0x45, 0x33, 0x44, 0x39, 0x34, 0x42, 0x45, 0x41, 0x34, 0x36, 0x46, 0x39, 0x41, 0x31,
    0x32, 0x41, 0x43, 0x36, 0x38, 0x38, 0x37, 0x43, 0x45, 0x32, 0x31, 0x38, 0x38, 0x35, 0x35, 0x39,
    0x46, 0x34, 0x30, 0x46, 0x46, 0x39, 0x35, 0x37, 0x37, 0x37, 0x45, 0x38, 0x30, 0x31, 0x34, 0x38,
    0x38, 0x39, 0x30, 0x22, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x33, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32,
    0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x68, 0x31, 0x1b, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x12, 0x43, 0x61, 0x6c, 0x69, 0x70, 0x74, 0x72, 0x61, 0x20, 0x46, 0x4d, 0x43, 0x20,
    0x41, 0x6c, 0x69, 0x61, 0x73, 0x31, 0x49, 0x30, 0x47, 0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x40,
    0x31, 0x32, 0x44, 0x39, 0x34, 0x36, 0x30, 0x43, 0x32, 0x44, 0x43, 0x43, 0x31, 0x45, 0x38, 0x42,
    0x30, 0x46, 0x38, 0x33, 0x42, 0x46, 0x34, 0x37, 0x46, 0x36, 0x32, 0x33, 0x39, 0x42, 0x34, 0x45,
    0x31, 0x35, 0x34, 0x42, 0x41, 0x44, 0x46, 0x34, 0x35, 0x44, 0x30, 0x34, 0x37, 0x30, 0x32, 0x31,
    0x31, 0x35, 0x31, 0x39, 0x30, 0x36, 0x36, 0x39, 0x31, 0x46, 0x30, 0x32, 0x32, 0x41, 0x46, 0x37,
    0x30, 0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b,
    0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04, 0xfa, 0x35, 0x89, 0xab, 0x9f, 0x45, 0x62, 0xb4,
    0x53, 0xa1, 0x26, 0xec, 0xd8, 0x41, 0x8b, 0xbf, 0x05, 0x79, 0xb1, 0x56, 0x56, 0x91, 0x33, 0xe6,
    0xe2, 0x0d, 0xaf, 0x96, 0x36, 0x55, 0x37, 0xd4, 0x41, 0x2a, 0xa0, 0x9b, 0x30, 0x8b, 0x0e, 0xcf,
    0x3e, 0x08, 0xc2, 0x52, 0x2f, 0x9f, 0x1b, 0x46, 0x83, 0xda, 0xed, 0x2b, 0xaa, 0x19, 0x98, 0xd8,
    0x61, 0x01, 0x0a, 0xef, 0xd8, 0x07, 0x30, 0xe3, 0x79, 0xe2, 0xe1, 0x3c, 0xc0, 0xcd, 0x94, 0x62,
    0xcc, 0x25, 0x84, 0x82, 0x0b, 0xb6, 0xd6, 0xc2, 0x63, 0x5f, 0xac, 0xb5, 0xb2, 0x2e, 0x95, 0x68,
    0xa6, 0xbe, 0xac, 0x5a, 0x8c, 0x92, 0x11, 0xb2, 0xa3, 0x82, 0x01, 0x4d, 0x30, 0x82, 0x01, 0x49,
    0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01,
    0xff, 0x02, 0x01, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x02, 0x04, 0x30, 0x16, 0x06, 0x06, 0x67, 0x81, 0x05, 0x05, 0x04, 0x04, 0x04, 0x0c,
    0x30, 0x0a, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x81, 0xca, 0x06,
    0x06, 0x67, 0x81, 0x05, 0x05, 0x04, 0x05, 0x04, 0x81, 0xbf, 0x30, 0x81, 0xbc, 0x30, 0x24, 0x80,
    0x08, 0x43, 0x61, 0x6c, 0x69, 0x70, 0x74, 0x72, 0x61, 0x81, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
    0x65, 0x83, 0x02, 0x01, 0x07, 0x87, 0x05, 0x00, 0x80, 0x00, 0x00, 0x00, 0x8a, 0x05, 0x00, 0x80,
    0x00, 0x00, 0x0b, 0x30, 0x81, 0x93, 0x80, 0x08, 0x43, 0x61, 0x6c, 0x69, 0x70, 0x74, 0x72, 0x61,
    0x81, 0x03, 0x46, 0x4d, 0x43, 0x83, 0x02, 0x01, 0x09, 0xa6, 0x7e, 0x30, 0x3d, 0x06, 0x09, 0x60,
    0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x04, 0x30, 0x35, 0x0e, 0x86, 0xcc, 0xee, 0x4d,
    0x36, 0x61, 0xa7, 0x62, 0x87, 0x6f, 0xaf, 0x32, 0xbd, 0x3b, 0x2b, 0x24, 0x74, 0x41, 0xed, 0x71,
    0xc8, 0xcf, 0x1a, 0x87, 0x9b, 0x16, 0x22, 0xc0, 0x1b, 0x78, 0x3b, 0xf3, 0x3f, 0x20, 0x17, 0x5f,
    0xf0, 0x40, 0xad, 0x74, 0x51, 0x26, 0x75, 0xdd, 0x9a, 0xf1, 0x30, 0x3d, 0x06, 0x09, 0x60, 0x86,
    0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x04, 0x30, 0x42, 0x12, 0x75, 0xa8, 0x7a, 0x71, 0xac,
    0xf4, 0x34, 0xb4, 0xf1, 0x07, 0x6a, 0xcd, 0xd6, 0x83, 0x77, 0xd0, 0xa3, 0x15, 0xf9, 0xe2, 0xa2,
    0x9b, 0x26, 0xb3, 0x98, 0x91, 0x3e, 0x89, 0xff, 0x33, 0x00, 0x6c, 0x10, 0xdc, 0xc4, 0xf1, 0xbd,
    0x74, 0x67, 0xf1, 0xe2, 0xc4, 0x1b, 0x0a, 0x89, 0x3a, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
    0x04, 0x16, 0x04, 0x14, 0x12, 0xd9, 0x46, 0x0c, 0x2d, 0xcc, 0x1e, 0x8b, 0x0f, 0x83, 0xbf, 0x47,
    0xf6, 0x23, 0x9b, 0x4e, 0x15, 0x4b, 0xad, 0xf4, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
    0x18, 0x30, 0x16, 0x80, 0x14, 0x21, 0xee, 0xef, 0x9a, 0x4c, 0x61, 0xd4, 0xb9, 0xe3, 0xd9, 0x4b,
    0xea, 0x46, 0xf9, 0xa1, 0x2a, 0xc6, 0x88, 0x7c, 0xe2,
];

const VAL_FMC_ALIAS_PUB_KEY: Ecc384PubKey = Ecc384PubKey {
    x: Array4xN([
        0xFA3589AB, 0x9F4562B4, 0x53A126EC, 0xD8418BBF, 0x0579B156, 0x569133E6, 0xE20DAF96,
        0x365537D4, 0x412AA09B, 0x308B0ECF, 0x3E08C252, 0x2F9F1B46,
    ]),
    y: Array4xN([
        0x83DAED2B, 0xAA1998D8, 0x61010AEF, 0xD80730E3, 0x79E2E13C, 0xC0CD9462, 0xCC258482,
        0x0BB6D6C2, 0x635FACB5, 0xB22E9568, 0xA6BEAC5A, 0x8C9211B2,
    ]),
};
const VAL_FMC_ALIAS_SIG: Ecc384Signature = Ecc384Signature {
    r: Array4xN([
        0x9DA1ADAB, 0xAF543AAF, 0xAA69E7AC, 0x79826819, 0x5A7399F5, 0x247AEE3C, 0xEA9D6AC3,
        0x1127F3D6, 0x94B111B0, 0x8F738707, 0x117114D1, 0x8C51E7ED,
    ]),
    s: Array4xN([
        0x112E97C1, 0x2CA3984B, 0x3CCC74F3, 0x7E325B2A, 0x68E09466, 0x4D305E33, 0x8CDDCAAE,
        0xE9B947C5, 0x1CE65BF5, 0xA11EAFCC, 0xAD763B41, 0xD88B6369,
    ]),
};

pub struct ValRomFlow {}

impl ValRomFlow {
    /// Execute ROM Flows based on reset reason
    ///
    /// # Arguments
    ///
    /// * `env` - ROM Environment
    #[inline(never)]
    pub fn run(env: &mut RomEnv) -> CaliptraResult<Option<FirmwareHandoffTable>> {
        let reset_reason = env.soc_ifc.reset_reason();
        match reset_reason {
            // Cold Reset Flow
            ResetReason::ColdReset => {
                cprintln!("[val-rom-cold-reset] ++");
                report_boot_status(ColdResetStarted.into());

                // SKIP Execute IDEVID layer
                // Copy canned LDEVID cert
                copy_canned_ldev_cert(env)?;

                // Download and validate firmware.
                _ = FirmwareProcessor::process(env)?;

                // Copy canned FMC Alias Cert
                copy_canned_fmc_alias_cert(env)?;

                cprintln!("[val-rom-cold-reset] --");
                report_boot_status(ColdResetComplete.into());

                Ok(Some(fht::make_fht(env)))
            }

            // Warm Reset Flow
            ResetReason::WarmReset => warm_reset::WarmResetFlow::run(env),

            // Update Reset Flow
            ResetReason::UpdateReset => update_reset::UpdateResetFlow::run(env),

            // Unknown/Spurious Reset Flow
            ResetReason::Unknown => Err(CaliptraError::ROM_UNKNOWN_RESET_FLOW),
        }
    }
}

pub fn copy_canned_ldev_cert(env: &mut RomEnv) -> CaliptraResult<()> {
    let _pub_x: [u8; 48] = (&VAL_LDEV_PUB_KEY.x).into();
    let _pub_y: [u8; 48] = (&VAL_LDEV_PUB_KEY.y).into();
    cprintln!("[ldev] PUB.X = {}", HexBytes(&_pub_x));
    cprintln!("[ldev] PUB.Y = {}", HexBytes(&_pub_y));

    let _sig_r: [u8; 48] = (&VAL_LDEV_SIG.r).into();
    let _sig_s: [u8; 48] = (&VAL_LDEV_SIG.s).into();
    cprintln!("[ldev] SIG.R = {}", HexBytes(&_sig_r));
    cprintln!("[ldev] SIG.S = {}", HexBytes(&_sig_s));

    // Store signature
    env.data_vault.set_ldev_dice_signature(&VAL_LDEV_SIG);

    // Store pub key
    env.data_vault.set_ldev_dice_pub_key(&VAL_LDEV_PUB_KEY);

    let tbs = &VAL_LDEV_TBS;
    env.fht_data_store.ldevid_tbs_size = tbs.len() as u16;
    let dst = unsafe {
        let tbs_max_size = LDEVID_TBS_SIZE as usize;
        if tbs.len() > tbs_max_size {
            return Err(CaliptraError::ROM_GLOBAL_UNSUPPORTED_LDEVID_TBS_SIZE);
        }
        let ptr = LDEVID_TBS_ORG as *mut u8;
        core::slice::from_raw_parts_mut(ptr, tbs.len())
    };
    dst[..tbs.len()].copy_from_slice(tbs);

    Ok(())
}

pub fn copy_canned_fmc_alias_cert(env: &mut RomEnv) -> CaliptraResult<()> {
    // Store signature
    env.data_vault.set_fmc_dice_signature(&VAL_FMC_ALIAS_SIG);

    // Store pub key
    env.data_vault.set_fmc_pub_key(&VAL_FMC_ALIAS_PUB_KEY);

    let tbs = &VAL_FMC_ALIAS_TBS;
    env.fht_data_store.fmcalias_tbs_size = tbs.len() as u16;
    let dst = unsafe {
        let tbs_max_size = FMCALIAS_TBS_SIZE as usize;
        if tbs.len() > tbs_max_size {
            return Err(CaliptraError::ROM_GLOBAL_UNSUPPORTED_FMCALIAS_TBS_SIZE);
        }

        let ptr = FMCALIAS_TBS_ORG as *mut u8;
        core::slice::from_raw_parts_mut(ptr, tbs.len())
    };
    dst[..tbs.len()].copy_from_slice(tbs);

    Ok(())
}

// ROM Verification Environemnt
pub(crate) struct ValRomImageVerificationEnv<'a> {
    pub(crate) sha384_acc: &'a mut Sha384Acc,
    pub(crate) soc_ifc: &'a mut SocIfc,
    pub(crate) data_vault: &'a mut DataVault,
}

impl<'a> ImageVerificationEnv for &mut ValRomImageVerificationEnv<'a> {
    /// Calculate Digest using SHA-384 Accelerator
    fn sha384_digest(&mut self, offset: u32, len: u32) -> CaliptraResult<ImageDigest> {
        loop {
            if let Some(mut txn) = self.sha384_acc.try_start_operation() {
                let mut digest = Array4x12::default();
                txn.digest(len, offset, false, &mut digest)?;
                return Ok(digest.0);
            }
        }
    }

    /// ECC-384 Verification routine
    fn ecc384_verify(
        &mut self,
        _digest: &ImageDigest,
        _pub_key: &ImageEccPubKey,
        _sig: &ImageEccSignature,
    ) -> CaliptraResult<Ecc384Result> {
        // Mock verify, just always return success
        Ok(Ecc384Result::Success)
    }

    fn lms_verify(
        &mut self,
        _digest: &ImageDigest,
        _pub_key: &ImageLmsPublicKey,
        _sig: &ImageLmsSignature,
    ) -> CaliptraResult<LmsResult> {
        // Mock verify, just always return success
        Ok(LmsResult::Success)
    }

    /// Retrieve Vendor Public Key Digest
    fn vendor_pub_key_digest(&self) -> ImageDigest {
        self.soc_ifc.fuse_bank().vendor_pub_key_hash().into()
    }

    /// Retrieve Vendor ECC Public Key Revocation Bitmask
    fn vendor_ecc_pub_key_revocation(&self) -> VendorPubKeyRevocation {
        self.soc_ifc.fuse_bank().vendor_ecc_pub_key_revocation()
    }

    /// Retrieve Vendor LMS Public Key Revocation Bitmask
    fn vendor_lms_pub_key_revocation(&self) -> u32 {
        self.soc_ifc.fuse_bank().vendor_lms_pub_key_revocation()
    }

    /// Retrieve Owner Public Key Digest from fuses
    fn owner_pub_key_digest_fuses(&self) -> ImageDigest {
        self.soc_ifc.fuse_bank().owner_pub_key_hash().into()
    }

    /// Retrieve Anti-Rollback disable fuse value
    fn anti_rollback_disable(&self) -> bool {
        self.soc_ifc.fuse_bank().anti_rollback_disable()
    }

    /// Retrieve Device Lifecycle state
    fn dev_lifecycle(&self) -> Lifecycle {
        self.soc_ifc.lifecycle()
    }

    /// Get the vendor key index saved in data vault on cold boot
    fn vendor_pub_key_idx_dv(&self) -> u32 {
        self.data_vault.ecc_vendor_pk_index()
    }

    /// Get the owner public key digest saved in the dv on cold boot
    fn owner_pub_key_digest_dv(&self) -> ImageDigest {
        self.data_vault.owner_pk_hash().into()
    }

    // Get the fmc digest from the data vault on cold boot
    fn get_fmc_digest_dv(&self) -> ImageDigest {
        self.data_vault.fmc_tci().into()
    }

    // Get Fuse FMC Key Manifest SVN
    fn fmc_fuse_svn(&self) -> u32 {
        self.soc_ifc.fuse_bank().fmc_fuse_svn()
    }

    // Get Runtime fuse SVN
    fn runtime_fuse_svn(&self) -> u32 {
        self.soc_ifc.fuse_bank().runtime_fuse_svn()
    }

    fn iccm_range(&self) -> Range<u32> {
        RomEnv::ICCM_RANGE
    }

    fn lms_verify_enabled(&self) -> bool {
        self.soc_ifc.fuse_bank().lms_verify() == RomVerifyConfig::EcdsaAndLms
    }
}
